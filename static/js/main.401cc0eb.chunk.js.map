{"version":3,"sources":["common/history.js","common/rootReducer.js","common/store.js","serviceWorker.js","images/logo.png","layouts/Logo/Logo.js","layouts/Header/President.js","layouts/Header/Container.js","layouts/Header/index.js","features/HomePage/images/banner_background.jpg","features/HomePage/images/banner_title.png","features/HomePage/components/Banner/Banner.js","features/HomePage/HomePage.js","index.js"],"names":["history","createBrowserHistory","basename","reducerMap","router","connectRouter","combineReducers","routerMiddleware","middlewares","thunk","configureStore","initialState","createStore","rootReducer","compose","applyMiddleware","Boolean","window","location","hostname","match","Logo","src","logo","className","alt","Component","President","headerClass","this","props","isTransparent","pathname","to","Container","connect","state","Banner","style","backgroundImage","banner_background","banner_title","HomePage","Header","ReactDOM","render","StrictMode","store","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAKeA,EADCC,YAAqB,CAAEC,SAAU,a,QCA3CC,EAAa,CACfC,OAAQC,YAAcL,IAGXM,cAAgBH,GCFzBC,EAASG,YAAiBP,GAC1BQ,EAAc,CAACC,IAAOL,GAuBbM,IAZSC,EAYTD,EAXGE,YACVC,EACAF,EACAG,YACIC,IAAe,WAAf,EAAmBP,K,QCXXQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mDClBS,MAA0B,iC,eCY1BC,E,4JAPX,WACI,OACI,qBAAKC,IAAKC,EAAMC,UAAU,cAAcC,IAAI,a,GAHrCC,a,gBCwCJC,E,4JAtCX,WACI,IAAIC,EAAcC,KAAKC,MAAMC,cAAgB,qBAAuB,SAChEC,EAAWH,KAAKC,MAAM1B,OAAOc,SAASc,SAC1C,OACI,wBAAQR,UAAWI,EAAnB,SACI,sBAAKJ,UAAU,iBAAf,UACI,qBAAKA,UAAU,cAAf,SACI,cAAC,EAAD,MAEJ,qBAAKA,UAAU,cAAf,SACI,qBAAIA,UAAU,eAAd,UACI,oBAAIA,UAAwB,MAAbQ,EAAmB,mBAAqB,YAAvD,SACI,cAAC,IAAD,CAAMC,GAAG,IAAT,oBAEJ,oBAAIT,UAAwB,WAAbQ,EAAwB,mBAAqB,YAA5D,SACI,cAAC,IAAD,CAAMC,GAAG,SAAT,qBAEJ,oBAAIT,UAAwB,YAAbQ,EAAyB,mBAAqB,YAA7D,SACI,cAAC,IAAD,CAAMC,GAAG,UAAT,2BAIZ,qBAAKT,UAAU,wBAAf,SACI,qBAAIA,UAAU,eAAd,UACI,oBAAIA,UAAU,YAAd,SACI,cAAC,IAAD,CAAMS,GAAG,SAAT,qBAEJ,oBAAIT,UAAU,YAAd,SACI,cAAC,IAAD,CAAMS,GAAG,YAAT,sC,GA7BRP,aCDlBQ,E,4JACF,WACI,OAAQ,cAAC,EAAD,eAAeL,KAAKC,Y,GAFZJ,aAYTS,ICfAD,EDeAC,aANf,SAAyBC,GACrB,MAAO,CACHhC,OAAQgC,EAAMhC,UAIkB,GAAzB+B,CAA6BD,G,QEhB7B,MAA0B,8CCA1B,MAA0B,yCCyB1BG,E,4JAnBX,WACI,OACI,qBAAKb,UAAU,cAAcc,MAAO,CAACC,gBAAgB,OAAD,OAASC,EAAT,MAApD,SACI,sBAAKhB,UAAU,yBAAf,UACI,qBAAKA,UAAU,eAAf,SACI,qBAAKF,IAAKmB,EAAchB,IAAI,OAEhC,qBAAKD,UAAU,iBAAf,SACI,oHAEJ,cAAC,IAAD,CAAQA,UAAU,gBAAlB,iC,GAXCE,aCWNgB,G,kKAVX,WACI,OACI,sBAAKlB,UAAU,oBAAf,UACI,cAACmB,EAAD,CAAQZ,eAAe,IACvB,cAAC,EAAD,W,GALOL,cCOvBkB,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACI,cAAC,IAAD,CAAiB/C,QAASA,EAA1B,SACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOgD,KAAK,IAAZ,SACI,cAAC,EAAD,cAMpBC,SAASC,eAAe,SV2GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.401cc0eb.chunk.js","sourcesContent":["import {createBrowserHistory} from \"history\";\r\n\r\n// A singleton history object for easy API navigation\r\n//const history = createBrowserHistory();\r\nconst history = createBrowserHistory({ basename: '/ssc-mix' });\r\nexport default history;\r\n","import {combineReducers} from \"redux\";\r\nimport {connectRouter} from \"connected-react-router\";\r\nimport history from \"./history\";\r\n\r\nconst reducerMap = {\r\n    router: connectRouter(history),\r\n};\r\n\r\nexport default combineReducers(reducerMap);\r\n","import {createStore, applyMiddleware, compose} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {routerMiddleware} from \"connected-react-router\";\r\nimport history from \"./history\";\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst router = routerMiddleware(history);\r\nconst middlewares = [thunk, router];\r\n\r\n/* istanbul ignore if  */\r\n\r\n/*if (process.env.NODE_ENV === \"development\") {\r\n    const {createLogger} = require(\"redux-logger\");\r\n\r\n    const logger = createLogger({collapsed: true});\r\n    middlewares.push(logger);\r\n}*/\r\n\r\nfunction configureStore(initialState) {\r\n    const store = createStore(\r\n        rootReducer,\r\n        initialState,\r\n        compose(\r\n            applyMiddleware(...middlewares),\r\n        )\r\n    );\r\n\r\n    return store;\r\n}\r\n\r\nexport default configureStore();\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.0fffdae2.png\";","import React, {Component} from 'react';\r\nimport logo from '../../images/logo.png';\r\nimport './style.scss';\r\n\r\nclass Logo extends Component {\r\n    render() {\r\n        return (\r\n            <img src={logo} className=\"common-logo\" alt=\"logo\"/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Logo;\r\n","import React, {Component} from 'react';\r\nimport {Logo} from \"../Logo\";\r\nimport './style.scss'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass President extends Component {\r\n    render() {\r\n        let headerClass = this.props.isTransparent ? 'header transparent' : 'header';\r\n        let pathname = this.props.router.location.pathname\r\n        return (\r\n            <header className={headerClass}>\r\n                <div className=\"header-content\">\r\n                    <div className=\"header-logo\">\r\n                        <Logo/>\r\n                    </div>\r\n                    <div className=\"header-menu\">\r\n                        <ul className=\"menu-content\">\r\n                            <li className={pathname === '/' ? \"menu-item active\" : \"menu-item\"}>\r\n                                <Link to='/'>Home</Link>\r\n                            </li>\r\n                            <li className={pathname === '/users' ? \"menu-item active\" : \"menu-item\"}>\r\n                                <Link to='/users'>Users</Link>\r\n                            </li>\r\n                            <li className={pathname === '/orders' ? \"menu-item active\" : \"menu-item\"}>\r\n                                <Link to='/orders'>Orders</Link>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"header-menu auth-menu\">\r\n                        <ul className=\"menu-content\">\r\n                            <li className=\"menu-item\">\r\n                                <Link to='/login'>Login</Link>\r\n                            </li>\r\n                            <li className=\"menu-item\">\r\n                                <Link to='/register'>Register</Link>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default President;","import React, {Component} from 'react';\r\nimport President from './President';\r\nimport {connect} from 'react-redux';\r\n\r\nclass Container extends Component {\r\n    render() {\r\n        return (<President {...this.props}/>)\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        router: state.router\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {})(Container)","import Container from './Container';\r\nexport default Container;","export default __webpack_public_path__ + \"static/media/banner_background.13e48aa3.jpg\";","export default __webpack_public_path__ + \"static/media/banner_title.d943bd68.png\";","import React, {Component} from \"react\";\r\nimport {Button} from \"antd\";\r\nimport banner_background from '../../images/banner_background.jpg'\r\nimport banner_title from '../../images/banner_title.png'\r\n\r\nclass Banner extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"home-banner\" style={{backgroundImage: `url(${banner_background})`}}>\r\n                <div className=\"banner-content-wrapper\">\r\n                    <div className=\"banner-title\">\r\n                        <img src={banner_title} alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"banner-content\">\r\n                        <span>一个高效的页面动画解决方案</span>\r\n                    </div>\r\n                    <Button className=\"banner-button\">\r\n                        Learn More\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Banner","import React, {Component} from \"react\";\r\nimport Header from '../../layouts/Header'\r\nimport {Banner} from \"./components\";\r\nimport './style.scss'\r\n\r\nclass HomePage extends Component{\r\n    render() {\r\n        return (\r\n            <div className=\"home-welcome-page\">\r\n                <Header isTransparent={true}/>\r\n                <Banner/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport store from \"./common/store\";\r\nimport history from './common/history'\r\nimport {Provider} from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {ConnectedRouter} from \"connected-react-router\";\r\nimport {Switch, Route} from \"react-router-dom\";\r\n\r\nimport {HomePage} from \"./features/HomePage\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <ConnectedRouter history={history}>\r\n                <Switch>\r\n                    <Route path=\"/\">\r\n                        <HomePage/>\r\n                    </Route>\r\n                </Switch>\r\n            </ConnectedRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}